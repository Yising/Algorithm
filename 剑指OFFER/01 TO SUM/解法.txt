//1、暴力解法
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int i;
        int j;
        int[] ret = {0, 0};
        
        for (i = 0; i < nums.length; i++) {
            for (j = i + 1; j < nums.length; j++) {
                if ((nums[i] + nums[j]) == target) {
                    ret[0] = i;
                    ret[1] = j;
                    return ret;
                }
            }
        }
        return ret;
    }
}

2、两次hash
/*	参考答案解法
*		1、以数组的值作为key，数组下标作为value，把数组保存到一个hashmap中（方便快速地通过值找到下标）
*		2、遍历数组，拿到target - num[i]的值，通过hashmap找到这个值的索引。
*	question：
*		1、数组中两个不同下标对应了同一个值，hashmap无法保存
*		答：hashmap在保存的时候，对于相同的key，会用新的value去覆盖旧的值，所以hashmap保存的是最后的索引，
*		这时如果target是两个相同值相加，数组遍历拿到第一个数组下标，查找hash表拿到第二个数组下标		
*/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int i;
        int toFind;
        int[] ret = {0, 0};
        
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        
        for (i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        
        for (i = 0; i < nums.length; i++) {
            toFind = target - nums[i];
            if (map.containsKey(toFind) && map.get(toFind) != i) {
                ret[0] = i;
                ret[1] = map.get(toFind);
                return ret;
            }
        }
        
        return ret;
    }
}

3、一次hash
/*	参考答案解法
*		存到hashmap的同时去查找是否有满足要求的两个数组元素，这个时候是以数组遍历到的元素
		为参考，去找前面是否有值为target - num[i]的元素
*/
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int i;
        int toFind;
        int[] ret = {0, 0};
        
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();

        for (i = 0; i < nums.length; i++) {
            toFind = target - nums[i];
            if (map.containsKey(toFind) && map.get(toFind) != i) {
                ret[0] = map.get(toFind);
                ret[1] = i;
                return ret;
            }
            map.put(nums[i], i);
        }
        
        return ret;
    }
}

